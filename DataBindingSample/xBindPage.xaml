<?xml version="1.0" encoding="utf-8"?>
<Page x:Class="DataBindingSample.xBindPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:DataBindingSample"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      mc:Ignorable="d">

  <Page.Resources>
    <local:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <local:BoolNegationConverter x:Key="BoolNegationConverter" />
    <local:ColorToBrushConverter x:Key="ColorToBrushConverter" />
    <local:BoolToGenderConverter x:Key="BoolToGenderConverter" />
    <local:ObjectNullConverter x:Key="ObjectNullConverter" />
    <local:ObjectNotNullConverter x:Key="ObjectNotNullConverter" />

    <SolidColorBrush x:Key="CalendarDatePickerTextForeground"
                     Color="Black" />
    <SolidColorBrush x:Key="CalendarDatePickerTextForegroundDisabled"
                     Color="Black" />
  </Page.Resources>

  <StackPanel Spacing="4">
    <!--#region Section 1: Binding Source 1 -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="1. Binding Source: Text"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S1_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>

      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">텍스트 상자에 텍스트를 입력하세요. 입력된 값을 바탕으로 데이터를 바인딩합니다.</Span>
        </TextBlock>
        <Grid ColumnSpacing="8">
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <TextBox x:Name="View_S1_MainInputTextBox"
                   Grid.Column="0"
                   Text="{x:Bind ViewModel.Main_S1_Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                   PlaceholderText="Enter main text." />
          <TextBox x:Name="View_S1_SubInputTextBox"
                   Grid.Column="1"
                   Text="{x:Bind SubViewModel.Sub_S1_Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                   PlaceholderText="Enter sub text." />
        </Grid>
        <local:CodeSample x:Name="View_S1_1stCodeSample"
                          Visibility="{x:Bind View_S1_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="Code-Behind"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">* 바인딩 소스로 코드 비하인드의 프로퍼티를 사용할 수 있습니다.</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind Code_S1_Text}" />
        </Border>
        <local:CodeSample x:Name="View_S1_2ndCodeSample"
                          Visibility="{x:Bind View_S1_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="ViewModel"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">* 바인딩 소스로 코드 비하인드에 뷰모델 인스턴스를 정의하고 하위 프로퍼티를 사용할 수 있습니다.</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S1_Text, Mode=OneWay}" />
        </Border>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind SubViewModel.Sub_S1_Text, Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S1_3rdCodeSample"
                          Visibility="{x:Bind View_S1_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="ElementName"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">* x:Name 특성이 있는 동일한 XAML의 다른 UI 요소도 위와 같은 방법으로 사용할 수 있습니다.</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind View_S1_MainInputTextBox.Text, Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S1_4thCodeSample"
                          Visibility="{x:Bind View_S1_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>

    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 2: Binding Source 2 -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="2. Binding Source: Slider"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S2_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>

      <StackPanel Style="{StaticResource View_StackPanelStyle}">

        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">슬라이더를 움직여 값을 조정하고 사각형의 크기를 변경하세요. 조정된 값을 바탕으로 데이터를 바인딩합니다.</Span>
        </TextBlock>

        <Slider x:Name="View_S2_SizeSlider"
                Minimum="50"
                Maximum="150"
                Width="400"
                Value="{x:Bind ViewModel.Main_S2_SliderValue, Mode=TwoWay}" />
        <local:CodeSample x:Name="View_S2_1stCodeSample"
                          Visibility="{x:Bind View_S2_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="ViewModel"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">* 바인딩 소스로 코드 비하인드에 뷰모델 인스턴스를 정의하고 하위 프로퍼티를 사용할 수 있습니다.</Span>
        </TextBlock>
        <Border Background="LightPink"
                Width="{x:Bind ViewModel.Main_S2_SliderValue, Mode=OneWay}"
                Height="{x:Bind ViewModel.Main_S2_SliderValue, Mode=OneWay}">
          <TextBlock Text="{x:Bind ViewModel.Main_S2_SliderValue, Mode=OneWay}"
                     HorizontalAlignment="Center"
                     VerticalAlignment="Center" />
        </Border>
        <local:CodeSample x:Name="View_S2_2ndCodeSample"
                          Visibility="{x:Bind View_S2_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="ElementName"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">* x:Name 특성이 있는 동일한 XAML의 다른 UI 요소도 위와 같은 방법으로 사용할 수 있습니다.</Span>
        </TextBlock>
        <Border x:Name="View_S2_Border1"
                Background="LightBlue"
                Width="{x:Bind View_S2_SizeSlider.Value, Mode=OneWay}"
                Height="{x:Bind View_S2_SizeSlider.Value, Mode=OneWay}">
          <TextBlock Text="{x:Bind View_S2_Border1.Height, Mode=OneWay}"
                     HorizontalAlignment="Center"
                     VerticalAlignment="Center" />
        </Border>
        <local:CodeSample x:Name="View_S2_3rdCodeSample"
                          Visibility="{x:Bind View_S2_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="ElementName (Self)"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">* 자기 자신의 x:Name 특성을 다시 사용할 수 있습니다.</Span>
        </TextBlock>
        <Border x:Name="View_S2_Border2"
                Background="LightGreen"
                Width="{x:Bind View_S2_SizeSlider.Value, Mode=OneWay}"
                Height="{x:Bind View_S2_Border2.Width, Mode=OneWay}">
          <TextBlock Text="{x:Bind ViewModel.Main_S2_SliderValue, Mode=OneWay}"
                     HorizontalAlignment="Center"
                     VerticalAlignment="Center" />
        </Border>
        <local:CodeSample x:Name="View_S2_4thCodeSample"
                          Visibility="{Binding ElementName=View_S2_CodeToggleButton, Path=IsChecked}" />
      </StackPanel>
    </Expander>

    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 3: Path -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="3. Path"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S3_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>

      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Text="Object"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">텍스트 상자에 텍스트를 입력하세요. 값을 입력하면 뷰모델(MainViewModel) 속성에 반영합니다.</Span>
        </TextBlock>

        <TextBox x:Name="View_S3_TextBox"
                 PlaceholderText="Enter text."
                 TextChanged="View_S3_TextBox_TextChanged" />
        <local:CodeSample x:Name="View_S3_1stCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">[ Property ]</Run>
* 객체의 일반 public 프로퍼티(속성)에 바인딩할 수 있습니다.
* 단, 속성 변경 시 변경 사항을 알리지 않기 때문에 OneWay 바인딩임에도 UI에 반영되지 않습니다.
* 프로퍼티가 아닌 필드에는 바인딩할 수 없습니다.</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S3_Text1, Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S3_2ndCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">[ Observable Object ]</Run>
* 프로퍼티가 포함된 클래스가 INotifyPropertyChanged 인터페이스를 구현하고, 프로퍼티 값 변경 시 INotifyPropertyChanged.PropertyChanged 이벤트를 발생시키면 UI에 변경을 알릴 수 있습니다.
* CommunityToolkit.Mvvm.ComponentModel NuGet 패키지를 설치하면, INotifyPropertyChanged를 구현한 ObservableObject 클래스를 제공합니다.
* ObservableObject를 상속하고, 속성 변경 시 setter에서 SetProperty 메서드를 실행시키면 UI에 변경 사항이 반영됩니다.</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S3_Text2, Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S3_3rdCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">[ DependencyProperty ]</Run>
* DependencyProperty는 DependencyObject를 상속한 클래스에서 사용 가능한, 프레임워크 관리하는 특수한 유형의 프로퍼티입니다.
* 프로퍼티의 값 저장, 변경 감지, 데이터 바인딩 연결, 스타일, 애니메이션, 메타데이터 관리 등을 프레임워크 레벨에서 관리합니다.
* 프레임워크에서 자동으로 변경 알림을 전파하여 바인딩 대상에 전달하기 때문에 INotifyPropertyChanged를 구현하지 않아도 됩니다.
* 일반 XAML 컨트롤의 속성들은 대부분 DependencyProperty입니다.</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind View_S3_TextBox.Text, Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S3_4thCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="Collections"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">컬렉션의 항목을 위치 또는 인덱스로 지정할 수 있습니다.</Span>
        </TextBlock>
        <TextBlock Text="[ Array ]"
                   FontWeight="SemiBold" />
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S3_Array[2]}" />
        </Border>
        <local:CodeSample x:Name="View_S3_5thCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <TextBlock Text="[ Jagged Array ]"
                   FontWeight="SemiBold" />
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S3_JaggedArray[1][2]}" />
        </Border>
        <local:CodeSample x:Name="View_S3_6thCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <TextBlock Text="[ List ]"
                   FontWeight="SemiBold" />
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S3_List[2]}" />
        </Border>
        <local:CodeSample x:Name="View_S3_7thCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />
        <TextBlock Text="[ Dictionary ]"
                   FontWeight="SemiBold" />
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S3_Dictionary['Third']}" />
        </Border>
        <local:CodeSample x:Name="View_S3_8thCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="Sub-Properties / AttachedProperty"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">슬라이더를 움직여 위치를 조정하세요.
* 프로퍼티의 연속적인 하위 프로퍼티를 참조할 수 있습니다.
* AttachedProperty를 참조할 때는 소유자와 소유자에 지정된 연결된 속성 이름을 괄호로 묶습니다.</Span>
        </TextBlock>
        <StackPanel Spacing="30"
                    Orientation="Horizontal"
                    HorizontalAlignment="Center">
          <Slider Grid.Column="0"
                  Header="Position X"
                  Minimum="0"
                  Maximum="150"
                  Width="250"
                  Value="{x:Bind ViewModel.Main_S3_Dog.Position.X, Mode=TwoWay}" />
          <Slider Grid.Column="1"
                  Header="Position Y"
                  Minimum="0"
                  Maximum="150"
                  Width="250"
                  Value="{x:Bind ViewModel.Main_S3_Dog.Position.Y, Mode=TwoWay}" />
        </StackPanel>
        <Grid ColumnSpacing="24"
              HorizontalAlignment="Center">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>

          <Canvas Grid.Column="0"
                  Width="200"
                  Height="200"
                  Background="{StaticResource SolidBackgroundFillColorBase}">
            <TextBlock x:Name="View_S3_Dog"
                       Canvas.Left="{x:Bind ViewModel.Main_S3_Dog.Position.X, Mode=OneWay}"
                       Canvas.Top="{x:Bind ViewModel.Main_S3_Dog.Position.Y, Mode=OneWay}"
                       Text="&#x1F436;"
                       FontSize="32" />
          </Canvas>
          <StackPanel Grid.Column="1"
                      VerticalAlignment="Center"
                      Spacing="8">
            <TextBlock Text="Name: " />
            <TextBlock Text="Icon: " />
            <TextBlock Text="Position X: " />
            <TextBlock Text="Position Y: " />
          </StackPanel>
          <StackPanel Grid.Column="2"
                      VerticalAlignment="Center"
                      Spacing="8">
            <TextBlock Text="{x:Bind ViewModel.Main_S3_Dog.Name, Mode=OneWay}" />
            <TextBlock Text="{x:Bind View_S3_Dog.Text, Mode=OneWay}" />
            <TextBlock Text="{x:Bind View_S3_Dog.(Canvas.Left), Mode=OneWay}" />
            <TextBlock Text="{x:Bind View_S3_Dog.(Canvas.Top), Mode=OneWay}" />
          </StackPanel>
        </Grid>

        <local:CodeSample x:Name="View_S3_9thCodeSample"
                          Visibility="{x:Bind View_S3_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
      <!--#endregion -->
    </Expander>

    <Border Height="12" />

    <!--#region Section 4: Mode -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="4. Mode"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S4_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>

      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">바인딩의 방향을 지정합니다. {x:Bind} 마크업 확장의 기본 바인딩 모드는 OneTime입니다. 바인딩 모드를 명시하지 않으면 OneTime 모드로 동작합니다.</Run>

<Run FontWeight="SemiBold">[ OneTime ]</Run>
UI가 처음 표시될 때에만 값을 표시하고 값의 변경에는 반응하지 않습니다.

<Run FontWeight="SemiBold">[ OneWay ]</Run>
UI가 데이터 소스의 값을 관찰하고 값 변경 시 UI를 업데이트합니다.

<Run FontWeight="SemiBold">[ TwoWay ]</Run>
UI가 데이터 소스의 값을 관찰하고 값 변경 시 UI를 업데이트하며, 반대로 UI에서 값을 변경하면 변경 사항이 데이터 소스에 반영됩니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <StackPanel Orientation="Horizontal"
                    Spacing="24"
                    HorizontalAlignment="Center">
          <!-- OneTime -->
          <StackPanel Spacing="12"
                      Width="200">
            <TextBlock Text="OneTime"
                       Style="{StaticResource BodyStrongTextBlockStyle}"
                       HorizontalAlignment="Center" />
            <TextBox x:Name="View_S4_OneTimeSourceTextBox"
                     PlaceholderText="Enter text."
                     Text="OneTime" />
            <TextBox x:Name="View_S4_OneTimeTargetTextBox"
                     Text="{x:Bind View_S4_OneTimeSourceTextBox.Text, Mode=OneTime}" />
          </StackPanel>

          <!-- OneWay -->
          <StackPanel Spacing="12"
                      Width="200">
            <TextBlock Text="OneWay"
                       Style="{StaticResource BodyStrongTextBlockStyle}"
                       HorizontalAlignment="Center" />
            <TextBox x:Name="View_S4_OneWaySourceTextBox"
                     PlaceholderText="Enter text." />
            <TextBox x:Name="View_S4_OneWayTargetTextBox"
                     PlaceholderText="Mirrors above text."
                     Text="{x:Bind View_S4_OneWaySourceTextBox.Text, Mode=OneWay}" />
          </StackPanel>

          <!-- TwoWay -->
          <StackPanel Spacing="12"
                      Width="200">
            <TextBlock Text="TwoWay"
                       Style="{StaticResource BodyStrongTextBlockStyle}"
                       HorizontalAlignment="Center" />
            <TextBox x:Name="View_S4_TwoWaySourceTextBox"
                     PlaceholderText="Enter text."
                     Text="{x:Bind View_S4_TwoWayTargetTextBox.Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <TextBox x:Name="View_S4_TwoWayTargetTextBox"
                     PlaceholderText="Mirrors and edit above text."
                     Text="{x:Bind View_S4_TwoWaySourceTextBox.Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
          </StackPanel>
        </StackPanel>

        <local:CodeSample x:Name="View_S4_1stCodeSample"
                          Visibility="{x:Bind View_S4_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 5: UpdateSourceTrigger -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="5. UpdateSourceTrigger"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S5_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>
      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">TwoWay 바인딩 모드일 때 바인딩 소스를 업데이트할 타이밍을 지정합니다.</Run>
  
<Run FontWeight="SemiBold">[ Default ]</Run>
바인딩을 사용하는 DependencyProperty의 기본 동작을 사용합니다. LostFocus인 TextBlock.Text를 제외하고 대부분 PropertyChanged이 기본 동작입니다.
  
<Run FontWeight="SemiBold">[ LostFocus ]</Run>
바인딩 대상 컨트롤의 포커스가 해제될 때 바인딩 소스가 업데이트됩니다.
  
<Run FontWeight="SemiBold">[ PropertyChanged ]</Run>
바인딩 대상의 값이 변경될 때마다 바인딩 소스가 업데이트됩니다.

* Explicit 모드는 {x:Bind} 마크업 확장에서 지원하지 않습니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <StackPanel Orientation="Horizontal"
                    Spacing="24"
                    HorizontalAlignment="Center">
          <!-- LostFocus -->
          <StackPanel Spacing="12"
                      Width="200">
            <TextBlock Text="LostFocus"
                       Style="{StaticResource BodyStrongTextBlockStyle}"
                       HorizontalAlignment="Center" />
            <TextBox PlaceholderText="LostFocus"
                     Text="{x:Bind ViewModel.Main_S5_Text1, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
            <Border Style="{StaticResource View_BorderStyle}">
              <TextBlock Text="{x:Bind ViewModel.Main_S5_Text1, Mode=OneWay}" />
            </Border>
          </StackPanel>

          <!-- PropertyChanged -->
          <StackPanel Spacing="12"
                      Width="200">
            <TextBlock Text="PropertyChanged"
                       Style="{StaticResource BodyStrongTextBlockStyle}"
                       HorizontalAlignment="Center" />
            <TextBox PlaceholderText="PropertyChanged"
                     Text="{x:Bind ViewModel.Main_S5_Text2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
            <Border Style="{StaticResource View_BorderStyle}">
              <TextBlock Text="{x:Bind ViewModel.Main_S5_Text2, Mode=OneWay}" />
            </Border>
          </StackPanel>
        </StackPanel>

        <local:CodeSample x:Name="View_S5_1stCodeSample"
                          Visibility="{x:Bind View_S5_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 6: Converter -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="6. Converter"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S6_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>
      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">Converter는 바인딩 소스와 대상 간에 데이터를 변환할 수 있도록 하는 변환기입니다.</Run>
  
* Converter를 사용하려면 IValueConverter를 구현한 클래스를 만들어야 합니다.
* IValueConverter는 바인딩 소스와 대상 간의 데이터를 서로 변환하는 로직을 포함한 Convert 및 ConvertBack 메서드를 구현합니다.
* Converter 인스턴스를 리소스에 생성하고 바인딩 시 {StaticResource} 마크업 확장으로 불러옵니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="BoolToVisibilityConverter" />
        <ToggleSwitch x:Name="View_S6_FirstToggleSwitch" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">토글 스위치를 켜면 텍스트가 보입니다.
* ToggleSwitch.IsOn 속성의 bool 객체를 TextBlock.Visibility 속성의 Visibility 객체로 변환합니다.</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="Visible"
                     Visibility="{x:Bind View_S6_FirstToggleSwitch.IsOn, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Border>
        <local:CodeSample x:Name="View_S6_1stCodeSample"
                          Visibility="{x:Bind View_S6_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="BoolNegationConverter (ConvertBack)" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">위 토글 스위와 반대로 동작합니다.
* ToggleSwitch.IsOn 속성의 bool 값을 반전시킵니다.
* TwoWay 바인딩 시 IValueConverter.ConverBack 메서드를 구현해야 합니다.</Span>
        </TextBlock>
        <ToggleSwitch x:Name="View_S6_SecondToggleSwitch"
                      IsOn="{x:Bind View_S6_FirstToggleSwitch.IsOn, Mode=TwoWay, Converter={StaticResource BoolNegationConverter}}" />
        <local:CodeSample x:Name="View_S6_2ndCodeSample"
                          Visibility="{x:Bind View_S6_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="ColorToBrushConverter" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">색상 선택기에서 색상을 선택하세요.
* ColorPicker.Color 속성의 Color 객체를 Rectangle.Fill 속성의 Brush 객체로 변환합니다.</Span>
        </TextBlock>
        <Rectangle Stretch="Fill"
                   Height="50"
                   RadiusX="24"
                   RadiusY="24"
                   Fill="{x:Bind View_S6_ColorPicker.Color, Mode=OneWay, Converter={StaticResource ColorToBrushConverter}}" />
        <ColorPicker x:Name="View_S6_ColorPicker"
                     Color="LightGoldenrodYellow"
                     ColorSpectrumShape="Ring"
                     IsMoreButtonVisible="True"
                     IsColorPreviewVisible="False"
                     HorizontalAlignment="Center" />
        <local:CodeSample x:Name="View_S6_3rdCodeSample"
                          Visibility="{x:Bind View_S6_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 7: FallbackValue / TargetNullValue -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="7. FallbackValue / TargetNullValue"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S7_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>

      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">[ FallbackValue ]</Run>
바인딩 소스 또는 바인딩 경로를 확인할 수 없는 경우(바인딩 실패 시) 기본적으로 표시할 값을 지정합니다.
  
<Run FontWeight="SemiBold">[ TargetNullValue ]</Run>
바인딩 소스 값이 명시적으로 null인 경우 대신 표시할 값을 지정합니다.

* {x:Bind Property.Name}과 같이 하위 속성(Name)을 참조할 때, 상위 속성(Property)이 null이면 TargetNullValue가 아닌 FallbackValue가 표시됩니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <StackPanel Orientation="Horizontal"
                    Spacing="24">
          <Border Style="{StaticResource View_BorderStyle}"
                  Width="400">
            <StackPanel Orientation="Horizontal"
                        Spacing="24">
              <StackPanel Spacing="8">
                <TextBlock Text="Object Type:" />
                <TextBlock Text="Name:" />
                <TextBlock Text="Gender:" />
                <TextBlock Text="Id:" />
                <TextBlock Text="Description:" />
              </StackPanel>

              <StackPanel Spacing="8">
                <TextBlock Text="{x:Bind ViewModel.Main_S7_Dog, Mode=OneWay, FallbackValue='Cannot be resolved (FallbackValue)', TargetNullValue='Target is null (TargetNullValue)'}" />
                <TextBlock Text="{x:Bind ViewModel.Main_S7_Dog.Name, Mode=OneWay, FallbackValue='Cannot be resolved (FallbackValue)', TargetNullValue='Target is null (TargetNullValue)'}" />
                <TextBlock Text="{x:Bind ViewModel.Main_S7_Dog.Gender, Mode=OneWay, Converter={StaticResource BoolToGenderConverter}, FallbackValue='Cannot be resolved (FallbackValue)', TargetNullValue='Target is null (TargetNullValue)'}" />
                <TextBlock Text="{x:Bind ViewModel.Main_S7_Dog.Id, Mode=OneWay, FallbackValue='Cannot be resolved (FallbackValue)', TargetNullValue='Target is null (TargetNullValue)'}" />
                <TextBlock Text="{x:Bind ViewModel.Main_S7_Dog.Description, Mode=OneWay, FallbackValue='Cannot be resolved (FallbackValue)', TargetNullValue='Target is null (TargetNullValue)'}" />
              </StackPanel>
            </StackPanel>
          </Border>

          <StackPanel Spacing="8"
                      VerticalAlignment="Center">
            <Button x:Name="View_S7_CreateButton"
                    Content="Create instance"
                    IsEnabled="{x:Bind ViewModel.Main_S7_Dog, Mode=OneWay, Converter={StaticResource ObjectNullConverter}}"
                    Style="{StaticResource AccentButtonStyle}"
                    Click="View_S7_CreateButton_Click" />
            <Button x:Name="View_S7_NullButton"
                    Content="Make object null"
                    IsEnabled="{x:Bind ViewModel.Main_S7_Dog, Mode=OneWay, Converter={StaticResource ObjectNotNullConverter}}"
                    Style="{StaticResource AccentButtonStyle}"
                    Click="View_S7_NullButton_Click" />
            <AutoSuggestBox x:Name="View_S7_AutoSuggestBox"
                            PlaceholderText="Enter description."
                            QueryIcon="Forward"
                            Width="200"
                            IsEnabled="{x:Bind ViewModel.Main_S7_Dog, Mode=OneWay, Converter={StaticResource ObjectNotNullConverter}}"
                            QuerySubmitted="View_S7_AutoSuggestBox_QuerySubmitted" />
          </StackPanel>
        </StackPanel>

        <local:CodeSample x:Name="View_S7_1stCodeSample"
                          Visibility="{x:Bind View_S7_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 8: ObservableCollection -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="8. ObservableCollection"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S8_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>

      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">ObservableCollection은 항목의 추가, 제거, 이동, 새로 고침 등의 변경 사항이 발생했을 때, UI에 변경 알림을 제공하는 동적 데이터 컬렉션입니다.</Run>

* INotifyCollectionChanged을 상속하여 CollectionChanged 이벤트를 통해 컬렉션 항목 변경 시 알림을 제공합니다. 
* ListView와 같은 컬렉션 컨트롤에 동적인 컬렉션 항목 변경을 반영하려면, ItemSource로 일반 컬렉션(List 등)이 아닌 INotifyCollectionChanged를 구현한 컬렉션(ObservableCollection 등)을 지정해야 합니다.  
* ObservableCollection을 바인딩할 때, 컬렉션 인스턴스 자체의 교체가 없고 컬렉션 항목 변경만 알리고 싶은 경우 OneWay가 아닌 OneTime 바인딩 모드로도 충분합니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <ListView x:Name="View_S8_ListView"
                  BorderBrush="{StaticResource SurfaceStrokeColorDefault}"
                  BorderThickness="1"
                  CornerRadius="{StaticResource ControlCornerRadius}">
          <ListView.Header>
            <StackPanel Orientation="Horizontal"
                        Spacing="8"
                        Padding="16,8"
                        BorderBrush="{StaticResource SurfaceStrokeColorDefault}"
                        BorderThickness="0,0,0,1">
              <TextBlock Text="Type"
                         Width="80"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Name"
                         Width="100"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Gender"
                         Width="100"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Id"
                         Width="100"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Description"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
            </StackPanel>
          </ListView.Header>

          <ListView.ItemTemplateSelector>
            <local:AnimalListViewItemTemplateSelector>
              <local:AnimalListViewItemTemplateSelector.DogTemplate>
                <DataTemplate x:DataType="local:Dog">
                  <StackPanel Orientation="Horizontal"
                              Spacing="8">
                    <TextBlock Text="{x:Bind}"
                               Width="80" />
                    <TextBlock Text="{x:Bind Name}"
                               Width="100" />
                    <TextBlock Text="{x:Bind Gender, Converter={StaticResource BoolToGenderConverter}}"
                               Width="100" />
                    <TextBlock Text="{x:Bind Id}"
                               Width="100" />
                    <TextBlock Text="{x:Bind Description, Mode=OneWay, TargetNullValue='No description'}" />
                  </StackPanel>
                </DataTemplate>
              </local:AnimalListViewItemTemplateSelector.DogTemplate>

              <local:AnimalListViewItemTemplateSelector.CatTemplate>
                <DataTemplate x:DataType="local:Cat">
                  <StackPanel Orientation="Horizontal"
                              Spacing="8">
                    <TextBlock Text="{x:Bind Name}"
                               Width="100" />
                    <TextBlock Text="{x:Bind Gender, Converter={StaticResource BoolToGenderConverter}}"
                               Width="100" />
                    <TextBlock Text="{x:Bind Id}"
                               Width="100" />
                    <TextBlock Text="{x:Bind Description, Mode=OneWay, TargetNullValue='No description'}" />
                  </StackPanel>
                </DataTemplate>
              </local:AnimalListViewItemTemplateSelector.CatTemplate>
            </local:AnimalListViewItemTemplateSelector>
          </ListView.ItemTemplateSelector>
        </ListView>

        <local:CodeSample x:Name="View_S8_1stCodeSample"
                          Visibility="{x:Bind View_S8_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Grid ColumnSpacing="12">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition />
          </Grid.ColumnDefinitions>
          <Border Grid.Column="0"
                  Style="{StaticResource View_BorderStyle}">
            <RadioButtons SelectedIndex="0"
                          MaxColumns="1"
                          VerticalAlignment="Center">
              <RadioButtons.Header>
                <TextBlock Text="ItemsSource"
                           Style="{StaticResource BodyStrongTextBlockStyle}" />
              </RadioButtons.Header>
              <RadioButton x:Name="View_S8_DogsRadioButton"
                           Content="Dogs"
                           Checked="View_S8_DogsRadioButton_Checked" />
              <RadioButton x:Name="View_S8_CatsRadioButton"
                           Content="Cats"
                           Checked="View_S8_CatsRadioButton_Checked" />
            </RadioButtons>

          </Border>

          <Border Grid.Column="1"
                  Style="{StaticResource View_BorderStyle}">
            <StackPanel Spacing="8"
                        VerticalAlignment="Center">
              <TextBlock Text="Items"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <Button x:Name="View_S8_AddButton"
                      Content="Add a new item"
                      Background="{StaticResource AcrylicBackgroundFillColorBaseBrush}"
                      Click="View_S8_AddButton_Click" />
              <Button x:Name="View_S8_DeleteButton"
                      Content="Delete selected item"
                      IsEnabled="{x:Bind View_S8_ListView.SelectedItem, Mode=OneWay, Converter={StaticResource ObjectNotNullConverter}}"
                      Background="{StaticResource AcrylicBackgroundFillColorBaseBrush}"
                      Click="View_S8_DeleteButton_Click" />
            </StackPanel>
          </Border>

          <Border Grid.Column="2"
                  Style="{StaticResource View_BorderStyle}">
            <TextBox Text="{x:Bind View_S8_ListView.SelectedItem.(local:Animal.Description), Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     IsEnabled="{x:Bind View_S8_ListView.SelectedItem, Mode=OneWay, Converter={StaticResource ObjectNotNullConverter}}">
              <TextBox.Header>
                <TextBlock Text="Edit description"
                           Style="{StaticResource BodyStrongTextBlockStyle}" />
              </TextBox.Header>
            </TextBox>
          </Border>
        </Grid>
        <local:CodeSample x:Name="View_S8_2ndCodeSample"
                          Visibility="{x:Bind View_S8_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">
* {x:Bind} 마크업 확장은 컴파일 시 바인딩 소스의 타입을 알아야 합니다.
* 따라서 위 예시의 ListView.ItemTemplate 속성으로 DataTemplate을 지정할 때 x:DataType을 지정하여야 x:Bind가 동작하며,
  ItemsSource의 컬렉션 항목 타입이 Dog, Cat 등으로 달라지면 각각의 DataTemplate을 가져야 합니다.
* DataTemplateSelector를 만들어 항목의 타입에 따라 각자의 DataTemplate을 선택할 수 있게 하고 이를 ItemTemplateSelector 속성으로 지정합니다.
* 바인딩에서 타입 안정성과 성능이 중요할 때 {x:Bind}를 고려할 수 있습니다.</Span>
        </TextBlock>
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 9: ControlTemplate -->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="9. ControlTemplate"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S9_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>

      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock TextWrapping="Wrap"
                   IsTextSelectionEnabled="True">
<Span xml:space="preserve"><Run FontWeight="SemiBold">컨트롤의 템플릿을 사용자 정의 ControlTemplate을 직접 만들어 지정할 수 있습니다.</Run>
  
* 컨트롤은 Microsoft.UI.Xaml.Controls 네임스페이스의 Control 클래스에서 파생된 XAML UI 요소를 의미하며, Template 속성으로 ControlTemplate을 지정합니다.
* ControlTemplate 내부에서 이 템플릿을 기반으로 하는 컨트롤의 속성 값을 {x:Bind} 마크업 확장을 이용하여 참조할 수 있습니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Text="ToggleButton"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <ToggleButton Content="Click"
                      Background="{StaticResource AcrylicBackgroundFillColorBaseBrush}">
          <ToggleButton.Template>
            <ControlTemplate TargetType="ToggleButton">
              <Grid x:Name="RootGrid"
                    Background="{x:Bind Background, Mode=OneWay}"
                    BorderBrush="{x:Bind BorderBrush, Mode=OneWay}"
                    BorderThickness="{x:Bind BorderThickness, Mode=OneWay}"
                    CornerRadius="{x:Bind CornerRadius, Mode=OneWay}"
                    Padding="{x:Bind Padding}">

                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>

                <!-- 토글 상태 표시 테두리 -->
                <Ellipse Grid.Column="0"
                         Width="8"
                         Height="8"
                         Margin="0,0,6,0"
                         Stroke="{StaticResource ControlStrongStrokeColorDefault}"
                         StrokeThickness="1" />

                <!-- 토글 상태 표시 내부 (토글이 켜지면 색상이 채워짐)  -->
                <Ellipse Grid.Column="0"
                         Width="8"
                         Height="8"
                         Margin="0,0,6,0"
                         Fill="{StaticResource AccentFillColorDefaultBrush}"
                         Visibility="{x:Bind IsChecked, Mode=OneWay}" />

                <!-- 콘텐츠 표시 부분 -->
                <ContentPresenter Grid.Column="1"
                                  Content="{x:Bind Content, Mode=OneWay}" />

                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="PointerOver">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundPointerOver}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundPressed}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundDisabled}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Checked" />
                    <VisualState x:Name="CheckedPointerOver">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundPointerOver}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="CheckedPressed">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundPressed}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="CheckedDisabled">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundDisabled}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Indeterminate" />
                    <VisualState x:Name="IndeterminatePointerOver">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundPointerOver}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="IndeterminatePressed">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundPressed}" />
                      </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="IndeterminateDisabled">
                      <VisualState.Setters>
                        <Setter Target="RootGrid.Background"
                                Value="{StaticResource ButtonBackgroundDisabled}" />
                      </VisualState.Setters>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
              </Grid>
            </ControlTemplate>
          </ToggleButton.Template>
        </ToggleButton>
        <local:CodeSample x:Name="View_S9_1stCodeSample"
                          Visibility="{x:Bind View_S9_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 10: Function Binding / Event Binding-->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="10. Function Binding / Event Binding"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S10_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>
      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Text="Function Binding"
                   Style="{StaticResource View_SubtitleTextBlockStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">{x:Bind}는 바인딩에서 함수를 사용할 수 있도록 지원합니다.</Run>

* 함수 바인딩은 다음과 같은 상황에서 유용합니다.
  - Converter 사용보다 더 간단히 값 변환을 수행할 수 있습니다.
  - 바인딩이 두 개 이상의 매개변수에 의존합니다.
          
* 함수 바인딩의 구문은 다음과 같습니다.
  {x:Bind pathToFunction.FunctionName(functionParameter1, functionParameter2, ...), bindingProperties}

* Converter를 사용한 바인딩을 함수 바인딩으로 다음과 같이 대체할 수 있습니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="Bool to Visibility" />
        <ToggleSwitch x:Name="View_S10_FirstToggleSwitch" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">토글 스위치를 켜면 텍스트가 보입니다.
* ToggleSwitch.IsOn 속성의 bool 객체를 TextBlock.Visibility 속성의 Visibility 객체로 변환합니다.

메서드 바인딩으로 다음과 같은 함수들을 사용할 수 있습니다.
* 코드 비하인드의 메서드 (private도 가능)
* 바인딩 소스 멤버의 인스턴스 메서드
* 클래스의 정적(static) 메서드</Span>
        </TextBlock>
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="Visible"
                     Visibility="{x:Bind ToVisibility(View_S10_FirstToggleSwitch.IsOn), Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S10_1stCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="Visible"
                     Visibility="{x:Bind ViewModel.ToVisibilityInstance(View_S10_FirstToggleSwitch.IsOn), Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S10_2ndCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="Visible"
                     Visibility="{x:Bind local:MainViewModel.ToVisibilityStatic(View_S10_FirstToggleSwitch.IsOn), Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S10_3rdCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="Negate bool (TwoWay)" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">위 토글 스위와 반대로 동작합니다.
* ToggleSwitch.IsOn 속성의 bool 값을 반전시킵니다.
  
TwoWay 바인딩 시 BindBack 함수를 지정해야 합니다.
* 바인딩 소스가 매개변수로 지정한 객체가 아닌 함수의 결과값 자체가 되기 때문에,
  TwoWay 바인딩에서 바인딩 대상 속성 변경 시 Converter의 ConvertBack과 달리 BindBack 함수에서 매개변수로 지정한 객체에 자동으로 반영되지 않습니다.
* 따라서 BindBack 함수에서 직접 해당되는 바인딩 소스의 속성(함수의 매개변수)을 변경해야 합니다.</Span>
        </TextBlock>
        <ToggleSwitch x:Name="View_S10_SecondToggleSwitch"
                      IsOn="{x:Bind NegateBool(View_S10_FirstToggleSwitch.IsOn), Mode=TwoWay, BindBack=NegateBool}" />
        <local:CodeSample x:Name="View_S10_4thCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <ToggleSwitch x:Name="View_S10_ThirdToggleSwitch"
                      IsOn="{x:Bind NegateBool(View_S10_FirstToggleSwitch.IsOn), Mode=TwoWay, BindBack=BindBackToggle}" />
        <local:CodeSample x:Name="View_S10_5thCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="Color to Brush" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">색상 선택기에서 색상을 선택하세요.
* ColorPicker.Color 속성의 Color 객체를 Rectangle.Fill 속성의 Brush 객체로 변환합니다.</Span>
        </TextBlock>
        <Rectangle Stretch="Fill"
                   Height="50"
                   RadiusX="24"
                   RadiusY="24"
                   Fill="{x:Bind ToBrush(View_S10_ColorPicker.Color), Mode=OneWay}" />
        <ColorPicker x:Name="View_S10_ColorPicker"
                     Color="LightGoldenrodYellow"
                     ColorSpectrumShape="Ring"
                     IsMoreButtonVisible="True"
                     IsColorPreviewVisible="False"
                     HorizontalAlignment="Center" />
        <local:CodeSample x:Name="View_S10_6thCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="Multiple Paremeters" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">두 텍스트 상자에 텍스트를 입력하세요. 두 텍스트를 연결하여 표시합니다.
* {x:Bind}에서는 다중 매개변수 함수를 사용할 수 있습니다.</Span>
        </TextBlock>

        <TextBox Text="{x:Bind ViewModel.Main_S10_Text1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                 PlaceholderText="Enter first text." />
        <TextBox Text="{x:Bind ViewModel.Main_S10_Text2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                 PlaceholderText="Enter second text." />
        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind Format('{0} and {1}', ViewModel.Main_S10_Text1, ViewModel.Main_S10_Text2), Mode=OneWay}" />
        </Border>
        <local:CodeSample x:Name="View_S10_7thCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="Instance Method" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">날짜를 선택하여 100일 후의 날짜를 확인하세요.
* DateTimeOffset.AddDays 메서드로 100일 후의 날짜를 구합니다.</Span>
        </TextBlock>

        <StackPanel Orientation="Horizontal"
                    Spacing="24">
          <CalendarDatePicker Date="{x:Bind ViewModel.Main_S10_DateTimeOffset, Mode=TwoWay}" />
          <TextBlock Text="100 Days Later"
                     VerticalAlignment="Center" />
          <CalendarDatePicker Date="{x:Bind ViewModel.Main_S10_DateTimeOffset.AddDays(100), Mode=OneWay}"
                              IsEnabled="False" />
        </StackPanel>
        <local:CodeSample x:Name="View_S10_8thCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_SubtitleTextBlockStyle}"
                   Text="Event Binding" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">{x:Bind}는 이벤트 바인딩을 지원합니다.</Run>
* 이벤트 핸들러를 코드 비하인드 메서드가 아닌 바인딩을 사용하여 지정할 수 있습니다.

이벤트 바인딩 시 유의해야 할 점은 다음과 같습니다.
* Click="{x:Bind rootFrame.GoForward}"와 같은 방법으로 사용합니다.
* 이벤트 핸들러 메서드는 오버로드할 수 없습니다.
* 이벤트 핸들러 메서드는 이벤트 시그니처와 일치하거나, 매개변수가 없거나, 매개변수 개수가 동일해야 합니다.
* 속성 바인딩과 달리 이벤트 자체의 변경 사항을 추적하지 않습니다.
</Span>
        </TextBlock>
        <Rectangle Stretch="Fill"
                   Height="50"
                   RadiusX="24"
                   RadiusY="24"
                   Fill="{x:Bind ViewModel.Main_S10_Brush, Mode=OneWay}" />
        <ColorPicker Color="LightGoldenrodYellow"
                     ColorSpectrumShape="Ring"
                     IsMoreButtonVisible="True"
                     IsColorPreviewVisible="False"
                     HorizontalAlignment="Center"
                     ColorChanged="{x:Bind ViewModel.ColorPicker_ColorChanged}" />
        <local:CodeSample x:Name="View_S10_9thCodeSample"
                          Visibility="{x:Bind View_S10_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 11: Casting-->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="11. Casting"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S11_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>
      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">{x:Bind}는 강타입 바인딩으로, 바인딩 경로의 각 단계에서 타입을 확인합니다.</Run>
  
* 반환된 타입에 해당하는 클래스 멤버가 없으면 컴파일 타임에 실패합니다.
* 따라서 캐스팅을 사용하면 바인딩 객체의 실제 타입을 지정할 수 있습니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">부모 타입의 변수에 자식 타입의 인스턴스를 할당하였다면, 자식 타입의 멤버를 사용할 때 캐스팅을 이용합니다.
캐스팅은 괄호를 이용하여 다음과 같이 두 가지 방법으로 사용할 수 있습니다.
  
* {x:Bind <Run FontWeight="SemiBold">((ChildClass)parentObject)</Run>.ChildMember}
* {x:Bind parentObject.<Run FontWeight="SemiBold">(ChildClass.ChildMember)</Run>}</Span>
        </TextBlock>

        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S11_Animal.Name}" />
        </Border>
        <local:CodeSample x:Name="View_S11_1stCodeSample"
                          Visibility="{x:Bind View_S11_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S11_Animal.(local:Cat.Id)}" />
        </Border>
        <local:CodeSample x:Name="View_S11_2ndCodeSample"
                          Visibility="{x:Bind View_S11_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Border Style="{StaticResource View_BorderStyle}">
          <TextBlock Text="{x:Bind ViewModel.Main_S11_Animals[2].(local:Dog.Id)}" />
        </Border>
        <local:CodeSample x:Name="View_S11_3rdCodeSample"
                          Visibility="{x:Bind View_S11_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">* x:DataType을 지정하는 DataTemplate과 같은 상황에서 바인딩 소스로 자기 자신(this)을 지정하여 사용해야 할 때, XAML 파서는 this 키워드를 제공하지 않습니다.
* 대신에 경로 없는 캐스팅(예: {x:Bind (x:String)})을 지원하며, 이를 사용할 수 있습니다.
* {x:Bind MethodName((namespace:TypeOfThis))}와 같은 구문을 갖습니다.</Span>
        </TextBlock>
        <ListView x:Name="View_S11_ListView"
                  ItemsSource="{x:Bind ViewModel.Main_S11_Animals}"
                  BorderBrush="{StaticResource SurfaceStrokeColorDefault}"
                  BorderThickness="1"
                  CornerRadius="{StaticResource ControlCornerRadius}">
          <ListView.Header>
            <StackPanel Orientation="Horizontal"
                        Spacing="8"
                        Padding="16,8"
                        BorderBrush="{StaticResource SurfaceStrokeColorDefault}"
                        BorderThickness="0,0,0,1">
              <TextBlock Text="Type"
                         Width="80"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Name"
                         Width="100"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Gender"
                         Width="100"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Id"
                         Width="100"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
              <TextBlock Text="Description"
                         Style="{StaticResource BodyStrongTextBlockStyle}" />
            </StackPanel>
          </ListView.Header>

          <ListView.ItemTemplate>
            <DataTemplate x:DataType="local:Animal">
              <StackPanel Orientation="Horizontal"
                          Spacing="8">
                <TextBlock Text="{x:Bind}"
                           Width="80" />
                <TextBlock Text="{x:Bind Name}"
                           Width="100" />
                <TextBlock Text="{x:Bind local:xBindPage.GetGender((local:Animal))}"
                           Width="100" />
                <TextBlock Text="{x:Bind (local:Animal).(local:Dog.Id)}"
                           Width="100" />
                <TextBlock Text="{x:Bind Description, Mode=OneWay, TargetNullValue='No description'}" />
              </StackPanel>
            </DataTemplate>
          </ListView.ItemTemplate>
        </ListView>

        <local:CodeSample x:Name="View_S11_4thCodeSample"
                          Visibility="{x:Bind View_S11_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
    <!--#endregion -->

    <Border Height="12" />

    <!--#region Section 12: Bindings-->
    <Expander Style="{StaticResource View_ExpanderStyle}">
      <Expander.Header>
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>
          <TextBlock Text="12. Bindings"
                     Grid.Column="0"
                     Style="{StaticResource SubtitleTextBlockStyle}" />
          <ToggleButton x:Name="View_S12_CodeToggleButton"
                        Grid.Column="1"
                        Content="Source code" />
        </Grid>
      </Expander.Header>
      <StackPanel Style="{StaticResource View_StackPanelStyle}">
        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve"><Run FontWeight="SemiBold">{x:Bind}를 포함하는 페이지 및 사용자 정의 컨트롤은 생성된 코드에 "Bindings" 속성을 갖습니다.</Run>

* Bindings에는 다음과 같은 메서드가 포함됩니다.
  - Update(): 모든 컴파일된 바인딩의 값을 업데이트합니다. OneWay/TwoWay 바인딩에서는 속성 변경 감지 리스너가 연결됩니다.
  - Initialize(): 바인딩이 아직 초기화되지 않은 경우 Update()를 호출하여 바인딩을 초기화합니다.
  - StopTracking(): OneWay/TwoWay 바인딩에 대해 생성된 모든 리스너를 해제합니다. Update()를 사용하여 다시 연결할 수 있습니다.
  
* Bindings 속성은 코드 비하인드에서 사용할 수 있습니다.
  
* Bindings는 컴파일 타임에 생성되기 때문에 컴파일하기 전에는 코드가 생성되지 않아 IntelliSense 오류가 표시될 수 있습니다. 자연스러운 현상으로 오류를 무시하여도 정상적으로 동작합니다.</Span>
        </TextBlock>

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">버튼을 눌러 바인딩을 연결 및 해제하세요. 이 페이지의 모든 바인딩이 조정됩니다.</Span>
        </TextBlock>

        <StackPanel Orientation="Horizontal"
                    Spacing="12">
          <Button x:Name="View_S12_UpdateButton"
                  Content="Update"
                  Style="{StaticResource AccentButtonStyle}"
                  Click="View_S12_UpdateButton_Click" />
          <Button x:Name="View_S12_StopTrackingButton"
                  Content="StopTracking"
                  Style="{StaticResource AccentButtonStyle}"
                  Click="View_S12_StopTrackingButton_Click" />
        </StackPanel>

        <InfoBar x:Name="View_S12_InfoBar"
                 Title="Binding is working."
                 Severity="Success"
                 IsOpen="True"
                 IsClosable="False" />

        <local:CodeSample x:Name="View_S12_1stCodeSample"
                          Visibility="{x:Bind View_S12_CodeToggleButton.IsChecked, Mode=OneWay}" />

        <Rectangle Style="{StaticResource View_SeparatorStyle}" />

        <TextBlock Style="{StaticResource View_DescriptionTextBlockStyle}">
<Span xml:space="preserve">텍스트를 입력하여 바인딩 동작을 확인하세요.</Span>
        </TextBlock>

        <TextBox x:Name="View_S12_InputTextBox"
                 PlaceholderText="Enter text." />
        <TextBox Text="{x:Bind View_S12_InputTextBox.Text, Mode=OneTime}"
                 PlaceholderText="OneTime Binding."
                 IsReadOnly="True" />
        <TextBox Text="{x:Bind View_S12_InputTextBox.Text, Mode=OneWay}"
                 PlaceholderText="OneWay Binding."
                 IsReadOnly="True" />
        
        <local:CodeSample x:Name="View_S12_2ndCodeSample"
                          Visibility="{x:Bind View_S12_CodeToggleButton.IsChecked, Mode=OneWay}" />
      </StackPanel>
    </Expander>
  </StackPanel>
</Page>
